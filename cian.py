import streamlit as st
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter

# –ö—ç—à–∏—Ä—É–µ–º –≥–µ–æ–∫–æ–¥–µ—Ä
@st.cache_resource
def init_geocoder():
    geolocator = Nominatim(user_agent="real_estate_app_autocomplete")
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ RateLimiter
    return RateLimiter(geolocator.geocode, min_delay_seconds=1)

def get_address_suggestions(query):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        geocode = init_geocoder()  # –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å rate limiting
        locations = geocode(query, exactly_one=False, limit=5)
        return [location.address for location in locations] if locations else []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: {str(e)}")
        return []

def main():
    st.set_page_config(page_title="–ü–æ–∏—Å–∫ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º", layout="wide")
    st.title("üîç –ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∞–¥—Ä–µ—Å–æ–≤")

    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    if 'selected_address' not in st.session_state:
        st.session_state.selected_address = "–ö–∞–∑–∞–Ω—å, –ö–∞—Å–∞—Ç–∫–∏–Ω–∞ 3"

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
    address_query = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", 
        st.session_state.selected_address,
        key="address_input"
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –∑–∞–ø—Ä–æ—Å
    if address_query != st.session_state.get('last_query', ''):
        st.session_state.last_query = address_query
        if len(address_query) > 3:  # –¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç 4 —Å–∏–º–≤–æ–ª–æ–≤
            with st.spinner("–ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–¥—Ä–µ—Å–∞..."):
                suggestions = get_address_suggestions(address_query)
                st.session_state.suggestions = suggestions

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'suggestions' in st.session_state and st.session_state.suggestions:
        st.write("–í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        cols = st.columns(3)
        
        for idx, suggestion in enumerate(st.session_state.suggestions[:6]):
            with cols[idx % 3]:
                if st.button(
                    suggestion, 
                    key=f"sugg_{idx}",
                    help="–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å"
                ):
                    st.session_state.selected_address = suggestion
                    st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

    # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞
    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", disabled=not st.session_state.selected_address):
        st.success(f"–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {st.session_state.selected_address}")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞

if __name__ == "__main__":
    main()
