import streamlit as st
import pandas as pd
from cianparser import CianParser
from geopy.geocoders import Nominatim
import plotly.express as px
from geopy.extra.rate_limiter import RateLimiter

# –ö—ç—à–∏—Ä—É–µ–º –≥–µ–æ–∫–æ–¥–µ—Ä
@st.cache_resource
def init_geocoder():
    geolocator = Nominatim(user_agent="real_estate_autocomplete_123")
    return RateLimiter(geolocator.geocode, min_delay_seconds=1)

def get_address_suggestions(query):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤"""
    try:
        geocode = init_geocoder()
        locations = geocode(query, exactly_one=False, limit=5)
        return [location.address for location in locations] if locations else []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: {str(e)}")
        return []

def parse_cian_data(location, radius, deal_type, rooms):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –¶–ò–ê–ù —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        parser = CianParser(location=location)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è deal_type —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ cianparser
        cian_deal_type = "sale" if deal_type == "–í—Ç–æ—Ä–∏—á–∫–∞" else "rent_long"
        
        data = parser.get_flats(
            deal_type=cian_deal_type,
            rooms=rooms,
            with_saving_csv=False,
            additional_settings={"radius": radius}
        )
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        return pd.DataFrame()

def main():
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω —Å –¶–ò–ê–ù", layout="wide")
    st.title("üè† –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'address_suggestions' not in st.session_state:
        st.session_state.address_suggestions = []
    if 'selected_address' not in st.session_state:
        st.session_state.selected_address = "–ö–∞–∑–∞–Ω—å, –ö–∞—Å–∞—Ç–∫–∏–Ω–∞ 3"

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    def update_suggestions():
        query = st.session_state.address_input
        if len(query) > 3:
            with st.spinner("–ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤..."):
                st.session_state.address_suggestions = get_address_suggestions(query)

    address_input = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:",
        st.session_state.selected_address,
        key="address_input",
        on_change=update_suggestions
    )

    # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    if st.session_state.address_suggestions:
        selected_suggestion = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫:",
            st.session_state.address_suggestions,
            index=None,
            placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å..."
        )
        
        if selected_suggestion:
            st.session_state.selected_address = selected_suggestion

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    with st.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            radius = st.slider("–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–∫–º)", 0.5, 5.0, 1.0, 0.1)
            deal_type = st.radio("–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", ["–í—Ç–æ—Ä–∏—á–∫–∞", "–ê—Ä–µ–Ω–¥–∞"], index=0)
        with col2:
            rooms = st.multiselect(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", 
                ["–°—Ç—É–¥–∏—è", "1", "2", "3", "4+"], 
                default=["1", "2", "3"]
            )

    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary"):
        if not st.session_state.selected_address:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å")
            return
            
        with st.spinner("–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
            room_mapping = {"–°—Ç—É–¥–∏—è": 0, "1": 1, "2": 2, "3": 3, "4+": 4}
            cian_rooms = [room_mapping[r] for r in rooms]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = parse_cian_data(
                location=st.session_state.selected_address,
                radius=radius,
                deal_type=deal_type,
                rooms=tuple(cian_rooms)
            )
            
            if not df.empty:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(df)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.dataframe(df[['address', 'price', 'area', 'rooms']].head(20))
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                st.plotly_chart(
                    px.histogram(df, x='price', title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω'),
                    use_container_width=True
                )
            else:
                st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")

if __name__ == "__main__":
    main()
