import streamlit as st
import pandas as pd
from cianparser import CianParser
from geopy.geocoders import Nominatim
import plotly.express as px
from geopy.extra.rate_limiter import RateLimiter
from geopy.exc import GeocoderTimedOut, GeocoderUnavailable

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'valid_address' not in st.session_state:
    st.session_state.valid_address = ""
if 'suggestions' not in st.session_state:
    st.session_state.suggestions = []
if 'show_suggestions' not in st.session_state:
    st.session_state.show_suggestions = False

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–æ–∫–æ–¥–µ—Ä
@st.cache_resource
def get_geocoder():
    geolocator = Nominatim(user_agent="real_estate_app_2024_v3")
    return RateLimiter(geolocator.geocode, min_delay_seconds=1)

def get_address_suggestions(query):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤"""
    try:
        if not query or len(str(query).strip()) < 3:
            return []
        
        geocode = get_geocoder()
        locations = geocode(str(query), exactly_one=False, limit=5)
        return [loc.address.split(',')[0] for loc in locations] if locations else []
    except Exception:
        return []

def validate_address(address):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞"""
    try:
        if not address or len(str(address).strip()) < 3:
            return False, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)"
            
        geocode = get_geocoder()
        location = geocode(str(address), exactly_one=True)
        return bool(location), "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" if not location else ""
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞: {str(e)}"

def analyze_real_estate(address, radius, offer_type, rooms):
    """–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    try:
        parser = CianParser(location=address)
        
        if offer_type == "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞":
            data = parser.get_newbuildings(
                rooms=rooms,
                with_saving_csv=False,
                additional_settings={"radius": radius}
            )
        else:
            data = parser.get_flats(
                deal_type="sale",
                rooms=rooms,
                with_saving_csv=False,
                additional_settings={"radius": radius}
            )
        
        df = pd.DataFrame(data)
        if not df.empty:
            df['offer_type'] = offer_type
            df['price'] = pd.to_numeric(df['price'].astype(str).str.replace(r'\D', '', regex=True), errors='coerce')
            df['area'] = pd.to_numeric(df['area'].astype(str).str.replace(r'[^\d.]', '', regex=True), errors='coerce')
            df = df.dropna(subset=['price', 'area'])
            df['price_per_m2'] = df['price'] / df['area']
            
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return pd.DataFrame()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", layout="wide")
st.title("üè† –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")

# –ë–ª–æ–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
address_input = st.text_input(
    "–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É –∏ –¥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–ª–µ–∫—Å–µ—è –ö–æ–∑–∏–Ω–∞ 3'):",
    value=st.session_state.valid_address,
    key="addr_input",
    placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å..."
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
if address_input and address_input != st.session_state.get('last_query', ''):
    st.session_state.last_query = address_input
    if len(str(address_input)) >= 3:
        with st.spinner("–ü–æ–∏—Å–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–æ–≤..."):
            st.session_state.suggestions = get_address_suggestions(address_input)
            st.session_state.show_suggestions = bool(st.session_state.suggestions)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
if st.session_state.show_suggestions and st.session_state.suggestions:
    selected = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–¥—Ä–µ—Å:",
        options=st.session_state.suggestions,
        index=None,
        key="addr_suggestions",
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞..."
    )
    
    if selected:
        st.session_state.valid_address = selected
        st.session_state.show_suggestions = False
        st.rerun()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
with st.expander("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", expanded=True):
    cols = st.columns(3)
    with cols[0]:
        radius = st.slider("–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–∫–º)", 0.5, 5.0, 1.0, 0.1)
    with cols[1]:
        offer_type = st.radio("–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", ["–í—Ç–æ—Ä–∏—á–∫–∞", "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞"])
    with cols[2]:
        rooms = st.multiselect(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
            ["–°—Ç—É–¥–∏—è", "1", "2", "3", "4+"],
            default=["1", "2"]
        )

# –ë–ª–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
if st.button("–ù–∞–π—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", type="primary"):
    current_address = str(address_input).strip() if address_input else ""
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    is_valid, msg = validate_address(current_address)
    if not is_valid:
        st.error(msg)
        st.stop()
    
    st.session_state.valid_address = current_address
    
    with st.spinner(f"–ò—â–µ–º {offer_type.lower()}..."):
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç
        room_map = {"–°—Ç—É–¥–∏—è": 0, "1": 1, "2": 2, "3": 3, "4+": 4}
        rooms_to_parse = [room_map[r] for r in rooms if r in room_map]
        
        if not rooms_to_parse:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –∫–æ–º–Ω–∞—Ç")
            st.stop()
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        df = analyze_real_estate(
            address=current_address,
            radius=radius,
            offer_type=offer_type,
            rooms=tuple(rooms_to_parse)
        
        if df.empty:
            st.warning("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            st.stop()
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(df)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        cols = st.columns(3)
        avg_price = df['price_per_m2'].mean()
        min_price = df['price_per_m2'].min()
        max_price = df['price_per_m2'].max()
        
        cols[0].metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:,.0f} ‚ÇΩ/–º¬≤")
        cols[1].metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{min_price:,.0f} ‚ÇΩ/–º¬≤")
        cols[2].metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{max_price:,.0f} ‚ÇΩ/–º¬≤")
        
        # –í–∫–ª–∞–¥–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        tab1, tab2 = st.tabs(["üìä –î–∞–Ω–Ω—ã–µ", "üìà –ì—Ä–∞—Ñ–∏–∫–∏"])
        
        with tab1:
            st.dataframe(
                df[['address', 'price', 'area', 'rooms', 'price_per_m2']]
                .sort_values('price_per_m2')
                .rename(columns={
                    'address': '–ê–¥—Ä–µ—Å',
                    'price': '–¶–µ–Ω–∞',
                    'area': '–ü–ª–æ—â–∞–¥—å',
                    'rooms': '–ö–æ–º–Ω–∞—Ç',
                    'price_per_m2': '–¶–µ–Ω–∞ –∑–∞ –º¬≤'
                }),
                column_config={
                    "–¶–µ–Ω–∞": st.column_config.NumberColumn(format="%.0f ‚ÇΩ"),
                    "–ü–ª–æ—â–∞–¥—å": st.column_config.NumberColumn(format="%.1f –º¬≤"),
                    "–¶–µ–Ω–∞ –∑–∞ –º¬≤": st.column_config.NumberColumn(format="%.0f ‚ÇΩ")
                },
                height=500,
                use_container_width=True
            )
        
        with tab2:
            fig1 = px.histogram(
                df,
                x='price_per_m2',
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä',
                labels={'price_per_m2': '–¶–µ–Ω–∞ –∑–∞ –º¬≤ (‚ÇΩ)'}
            )
            st.plotly_chart(fig1, use_container_width=True)
            
            fig2 = px.scatter(
                df,
                x='area',
                y='price',
                color='rooms',
                title='–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç –ø–ª–æ—â–∞–¥–∏',
                labels={'area': '–ü–ª–æ—â–∞–¥—å (–º¬≤)', 'price': '–¶–µ–Ω–∞ (‚ÇΩ)'}
            )
            st.plotly_chart(fig2, use_container_width=True)
