import streamlit as st
import pandas as pd
from cianparser import CianParser
from geopy.geocoders import Nominatim
import plotly.express as px
from geopy.extra.rate_limiter import RateLimiter
from geopy.exc import GeocoderTimedOut, GeocoderUnavailable

# –ö—ç—à–∏—Ä—É–µ–º –≥–µ–æ–∫–æ–¥–µ—Ä
@st.cache_resource
def init_geocoder():
    geolocator = Nominatim(user_agent="real_estate_analyzer_123")
    return RateLimiter(geolocator.geocode, min_delay_seconds=1)

def get_address_suggestions(query):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if not query or len(query.strip()) < 3:
            return []
            
        geocode = init_geocoder()
        locations = geocode(query, exactly_one=False, limit=5)
        return [location.address for location in locations] if locations else []
    
    except (GeocoderTimedOut, GeocoderUnavailable):
        st.error("–°–µ—Ä–≤–∏—Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: {str(e)}")
        return []

def validate_address(address):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞"""
    try:
        if not address or len(address.strip()) < 3:
            return False, "–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
            
        geocode = init_geocoder()
        location = geocode(address, exactly_one=True)
        return bool(location), "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" if not location else ""
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞: {str(e)}"

def main():
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", layout="wide")
    st.title("üè† –ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–∏—á–∫–∏ –∏ –Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–∫")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'address_suggestions' not in st.session_state:
        st.session_state.address_suggestions = []
    if 'selected_address' not in st.session_state:
        st.session_state.selected_address = ""
    if 'last_valid_address' not in st.session_state:
        st.session_state.last_valid_address = ""

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    address_input = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–ª–µ–∫—Å–µ—è –ö–æ–∑–∏–Ω–∞'):",
        value=st.session_state.selected_address,
        key="address_input",
        placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å..."
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–≤–æ–¥–∞
    if (address_input != st.session_state.get('last_query', '') and 
        len(address_input) >= 3):
        
        st.session_state.last_query = address_input
        with st.spinner("–ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–¥—Ä–µ—Å–æ–≤..."):
            suggestions = get_address_suggestions(address_input)
            st.session_state.address_suggestions = suggestions
            st.session_state.show_suggestions = bool(suggestions)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
    if (st.session_state.get('show_suggestions', False) and 
        st.session_state.address_suggestions):
        
        selected_suggestion = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∞–¥—Ä–µ—Å–∞:",
            options=st.session_state.address_suggestions,
            index=None,
            key="address_suggestions",
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞..."
        )
        
        if selected_suggestion:
            st.session_state.selected_address = selected_suggestion
            st.session_state.last_valid_address = selected_suggestion
            st.session_state.show_suggestions = False
            st.rerun()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã
    if st.button("–ù–∞–π—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", type="primary"):
        current_address = st.session_state.selected_address
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        if not current_address or not current_address.strip():
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        is_valid, validation_msg = validate_address(current_address)
        
        if not is_valid:
            st.error(validation_msg)
            return
            
        st.session_state.last_valid_address = current_address
        st.success(f"–ê–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {current_address}")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        # ...

if __name__ == "__main__":
    main()
