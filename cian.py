import streamlit as st
import pandas as pd
from cianparser import CianParser
from geopy.geocoders import Nominatim
import plotly.express as px
import re
import time
from functools import lru_cache

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_RETRIES = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
TIMEOUT = 10     # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'search_data' not in st.session_state:
    st.session_state.search_data = None
if 'last_query' not in st.session_state:
    st.session_state.last_query = {}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–æ–∫–æ–¥–µ—Ä
@st.cache_resource
def get_geocoder():
    return Nominatim(user_agent="reliable_estate_search", timeout=TIMEOUT)

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
def safe_cian_parse(address, radius, offer_type, rooms, retry_count=MAX_RETRIES):
    for attempt in range(retry_count):
        try:
            parser = CianParser(location=address)
            
            params = {
                "rooms": rooms,
                "with_saving_csv": False,
                "additional_settings": {
                    "radius": radius,
                    "page": 1
                }
            }
            
            start_time = time.time()
            
            if offer_type == "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞":
                data = parser.get_newbuildings(**params)
            else:
                data = parser.get_flats(deal_type="sale", **params)
            
            if data:
                df = pd.DataFrame(data)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                required_cols = {'price', 'area', 'address', 'rooms'}
                if not required_cols.issubset(df.columns):
                    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
                
                # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                df['price_clean'] = df['price'].apply(
                    lambda x: re.sub(r'[^\d]', '', str(x)) if pd.notnull(x) else ''
                )
                df['area_clean'] = df['area'].apply(
                    lambda x: re.sub(r'[^\d.]', '', str(x)) if pd.notnull(x) else ''
                )
                
                df['price_num'] = pd.to_numeric(df['price_clean'], errors='coerce')
                df['area_num'] = pd.to_numeric(df['area_clean'], errors='coerce')
                
                df = df.dropna(subset=['price_num', 'area_num'])
                
                if df.empty:
                    continue  # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                
                df['price_per_m2'] = df['price_num'] / df['area_num']
                
                return {
                    'data': df[['address', 'price_num', 'area_num', 'rooms', 'price_per_m2']]
                            .rename(columns={'price_num': 'price', 'area_num': 'area'}),
                    'time': time.time() - start_time
                }
            
        except Exception as e:
            if attempt == retry_count - 1:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
            time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    
    return None

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="–£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", layout="wide")
st.title("üîç –£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")

# –ü–æ–∏—Å–∫–æ–≤–∞—è —Ñ–æ—Ä–º–∞
with st.form("main_form"):
    address = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 52'):",
        help="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å, –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∏"
    )
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
    if address and len(address) > 2:
        try:
            locations = get_geocoder().geocode(address, exactly_one=False, limit=3)
            if locations:
                selected = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫:",
                    [loc.address.split(',')[0] for loc in locations],
                    index=None
                )
                if selected:
                    address = selected
        except Exception:
            pass
    
    cols = st.columns([1,1,2])
    with cols[0]:
        radius = st.slider("–†–∞–¥–∏—É—Å (–∫–º)", 0.3, 2.0, 0.8, 0.1)
    with cols[1]:
        offer_type = st.radio("–¢–∏–ø", ["–í—Ç–æ—Ä–∏—á–∫–∞", "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞"])
    with cols[2]:
        rooms = st.multiselect(
            "–ö–æ–º–Ω–∞—Ç—ã",
            ["–°—Ç—É–¥–∏—è", "1", "2", "3", "4+"],
            default=["1", "2"]
        )
    
    if st.form_submit_button("–ù–∞–π—Ç–∏", type="primary"):
        if not address or len(address.strip()) < 3:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
            st.stop()
        
        current_query = {
            'address': address,
            'radius': radius,
            'offer_type': offer_type,
            'rooms': tuple(rooms)
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å
        if current_query == st.session_state.last_query:
            st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
        else:
            with st.spinner(f"–ò—â–µ–º {offer_type.lower()}..."):
                result = safe_cian_parse(
                    address=address,
                    radius=radius,
                    offer_type=offer_type,
                    rooms=tuple(rooms)
                )
                
                if result:
                    st.session_state.search_data = result['data']
                    st.session_state.last_query = current_query
                    st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(result['data'])} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∑–∞ {result['time']:.1f} —Å–µ–∫")
                else:
                    st.error("""
                    –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
                    1. –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                    2. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
                    3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¶–ò–ê–ù
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.
                    """)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if st.session_state.search_data is not None:
    df = st.session_state.search_data
    
    st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    m1, m2, m3 = st.columns(3)
    m1.metric("–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", len(df))
    m2.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{df['price_per_m2'].mean():,.0f} ‚ÇΩ/–º¬≤")
    m3.metric("–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", 
             f"{df['price_per_m2'].min():,.0f}-{df['price_per_m2'].max():,.0f} ‚ÇΩ/–º¬≤")
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
    tab1, tab2 = st.tabs(["–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"])
    
    with tab1:
        st.dataframe(
            df.sort_values('price_per_m2'),
            column_config={
                "price": st.column_config.NumberColumn("–¶–µ–Ω–∞", format="%.0f ‚ÇΩ"),
                "area": st.column_config.NumberColumn("–ü–ª–æ—â–∞–¥—å", format="%.1f –º¬≤"),
                "price_per_m2": st.column_config.NumberColumn("–¶–µ–Ω–∞/–º¬≤", format="%.0f ‚ÇΩ")
            },
            height=400,
            use_container_width=True
        )
    
    with tab2:
        c1, c2 = st.columns(2)
        with c1:
            fig1 = px.histogram(
                df,
                x='price_per_m2',
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω',
                labels={'price_per_m2': '–¶–µ–Ω–∞ –∑–∞ –º¬≤ (‚ÇΩ)'}
            )
            st.plotly_chart(fig1, use_container_width=True)
        
        with c2:
            fig2 = px.scatter(
                df,
                x='area',
                y='price',
                color='rooms',
                hover_name='address',
                title='–¶–µ–Ω–∞ vs –ü–ª–æ—â–∞–¥—å',
                labels={'area': '–ü–ª–æ—â–∞–¥—å (–º¬≤)', 'price': '–¶–µ–Ω–∞ (‚ÇΩ)'}
            )
            st.plotly_chart(fig2, use_container_width=True)

# –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É
st.sidebar.markdown("""
### –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
1. –í–≤–æ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞ + –¥–æ–º)
2. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ (0.5-1 –∫–º)
3. –í—ã–±–∏—Ä–∞–π—Ç–µ 1-2 —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç
4. –î–ª—è –Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–∫ —É—Ç–æ—á–Ω—è–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ñ–ö
""")
