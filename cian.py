import streamlit as st
import pandas as pd
from cianparser import CianParser
from geopy.geocoders import Nominatim
import plotly.express as px
from geopy.extra.rate_limiter import RateLimiter
from functools import lru_cache
import re

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'valid_address' not in st.session_state:
    st.session_state.valid_address = ""
if 'search_results' not in st.session_state:
    st.session_state.search_results = None

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–æ–∫–æ–¥–µ—Ä
@st.cache_resource
def get_geocoder():
    return Nominatim(user_agent="reliable_estate_app", timeout=7)

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
@lru_cache(maxsize=50)
def get_cached_suggestions(query: str):
    try:
        if len(query) < 3:
            return []
        
        geocode = get_geocoder().geocode
        locations = geocode(query, exactly_one=False, limit=3)
        return [loc.address.split(',')[0] for loc in locations][:3] if locations else []
    except Exception:
        return []

def safe_parse_data(df):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–æ–ª–±—Ü–æ–≤"""
    required_columns = {'price', 'area', 'address', 'rooms'}
    
    if not isinstance(df, pd.DataFrame) or not required_columns.issubset(df.columns):
        return None
    
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        df = df.copy()
        df['price_clean'] = df['price'].apply(lambda x: re.sub(r'[^\d]', '', str(x)))
        df['area_clean'] = df['area'].apply(lambda x: re.sub(r'[^\d.]', '', str(x)))
        
        df['price_num'] = pd.to_numeric(df['price_clean'], errors='coerce')
        df['area_num'] = pd.to_numeric(df['area_clean'], errors='coerce')
        
        df = df.dropna(subset=['price_num', 'area_num'])
        df['price_per_m2'] = df['price_num'] / df['area_num']
        
        return df[['address', 'price_num', 'area_num', 'rooms', 'price_per_m2']]\
               .rename(columns={
                   'price_num': 'price',
                   'area_num': 'area'
               })
    except Exception:
        return None

def get_real_estate_data(address, radius, offer_type, rooms):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        parser = CianParser(location=address)
        
        params = {
            "rooms": rooms,
            "with_saving_csv": False,
            "additional_settings": {"radius": radius, "page": 1}
        }
        
        if offer_type == "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞":
            data = parser.get_newbuildings(**params)
        else:
            data = parser.get_flats(deal_type="sale", **params)
        
        return pd.DataFrame(data) if data else pd.DataFrame()
    except Exception:
        return pd.DataFrame()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="–ù–∞–¥—ë–∂–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", layout="wide")
st.title("üè° –ù–∞–¥—ë–∂–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")

# –ü–æ–∏—Å–∫–æ–≤–∞—è —Ñ–æ—Ä–º–∞
with st.form("search_form"):
    address = st.text_input("–ê–¥—Ä–µ—Å (—É–ª–∏—Ü–∞ –∏ –¥–æ–º):", help="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å")
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
    if address and len(address) >= 3:
        suggestions = get_cached_suggestions(address)
        if suggestions:
            selected_address = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", [""] + suggestions)
            if selected_address:
                address = selected_address
    
    cols = st.columns(3)
    with cols[0]:
        radius = st.slider("–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–∫–º)", 0.5, 3.0, 1.0, 0.1)
    with cols[1]:
        offer_type = st.radio("–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:", ["–í—Ç–æ—Ä–∏—á–∫–∞", "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞"])
    with cols[2]:
        rooms = st.multiselect("–ö–æ–º–Ω–∞—Ç—ã:", ["–°—Ç—É–¥–∏—è", "1", "2", "3", "4+"], default=["1", "2"])
    
    if st.form_submit_button("–ù–∞–π—Ç–∏", type="primary"):
        if not address:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å")
            st.stop()
        
        with st.spinner("–ò—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è..."):
            raw_data = get_real_estate_data(address, radius, offer_type, tuple(rooms))
            clean_data = safe_parse_data(raw_data)
            
            if clean_data is None or clean_data.empty:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
                st.session_state.search_results = None
            else:
                st.session_state.search_results = clean_data
                st.session_state.valid_address = address
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(clean_data)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if st.session_state.search_results is not None:
    df = st.session_state.search_results
    
    st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è: {st.session_state.valid_address}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    cols = st.columns(3)
    avg_price = df['price_per_m2'].mean()
    cols[0].metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:,.0f} ‚ÇΩ/–º¬≤")
    cols[1].metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{df['price_per_m2'].min():,.0f} ‚ÇΩ/–º¬≤")
    cols[2].metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", f"{df['price_per_m2'].max():,.0f} ‚ÇΩ/–º¬≤")
    
    # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
    with st.expander("üìã –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", expanded=True):
        st.dataframe(
            df.sort_values('price_per_m2'),
            column_config={
                "price": st.column_config.NumberColumn("–¶–µ–Ω–∞", format="%.0f ‚ÇΩ"),
                "area": st.column_config.NumberColumn("–ü–ª–æ—â–∞–¥—å", format="%.1f –º¬≤"),
                "price_per_m2": st.column_config.NumberColumn("–¶–µ–Ω–∞ –∑–∞ –º¬≤", format="%.0f ‚ÇΩ")
            },
            height=400,
            use_container_width=True
        )
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    tab1, tab2 = st.tabs(["üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω", "üìä –¶–µ–Ω–∞ vs –ü–ª–æ—â–∞–¥—å"])
    
    with tab1:
        fig1 = px.histogram(
            df,
            x='price_per_m2',
            nbins=20,
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä'
        )
        st.plotly_chart(fig1, use_container_width=True)
    
    with tab2:
        fig2 = px.scatter(
            df,
            x='area',
            y='price',
            color='rooms',
            hover_name='address',
            labels={'area': '–ü–ª–æ—â–∞–¥—å (–º¬≤)', 'price': '–¶–µ–Ω–∞ (‚ÇΩ)'}
        )
        st.plotly_chart(fig2, use_container_width=True)
