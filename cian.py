import streamlit as st
import pandas as pd
from cianparser import CianParser
from geopy.geocoders import Nominatim
import plotly.express as px
import re
import time
from functools import lru_cache

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_RETRIES = 3
TIMEOUT = 10
CIAN_PARSER_CONFIG = {
    "room_mapping": {
        "–°—Ç—É–¥–∏—è": "studio",
        "1": 1,
        "2": 2,
        "3": 3,
        "4+": 4
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
def init_session_state():
    if 'search_data' not in st.session_state:
        st.session_state.search_data = None
    if 'last_query' not in st.session_state:
        st.session_state.last_query = {}
    if 'geo_cache' not in st.session_state:
        st.session_state.geo_cache = {}

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–æ–∫–æ–¥–µ—Ä
@st.cache_resource
def get_geocoder():
    return Nominatim(user_agent="reliable_estate_search", timeout=TIMEOUT)

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç –¥–ª—è –¶–ò–ê–ù
def prepare_rooms_param(selected_rooms):
    if not selected_rooms:
        return "all"
    
    cian_rooms = []
    for room in selected_rooms:
        mapped_room = CIAN_PARSER_CONFIG["room_mapping"].get(room)
        if mapped_room is not None:
            cian_rooms.append(mapped_room)
    
    return tuple(cian_rooms) if cian_rooms else "all"

# –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def clean_data(raw_data):
    if not raw_data:
        return None
    
    df = pd.DataFrame(raw_data)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_cols = {'price', 'area', 'address', 'rooms'}
    if not required_cols.issubset(df.columns):
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
    
    # –û—á–∏—Å—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
    numeric_cols = {
        'price': r'[^\d]',
        'area': r'[^\d.]'
    }
    
    for col, pattern in numeric_cols.items():
        clean_col = f"{col}_clean"
        df[clean_col] = df[col].apply(
            lambda x: re.sub(pattern, '', str(x)) if pd.notnull(x) else ''
        )
        df[col] = pd.to_numeric(df[clean_col], errors='coerce')
    
    df = df.dropna(subset=['price', 'area'])
    
    if df.empty:
        return None
    
    df['price_per_m2'] = df['price'] / df['area']
    return df[['address', 'price', 'area', 'rooms', 'price_per_m2']]

# –ü–∞—Ä—Å–µ—Ä —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def safe_cian_parse(address, radius, offer_type, rooms, retry_count=MAX_RETRIES):
    cian_rooms = prepare_rooms_param(rooms)
    
    for attempt in range(retry_count):
        try:
            parser = CianParser(location=address)
            params = {
                "rooms": cian_rooms,
                "with_saving_csv": False,
                "additional_settings": {
                    "radius": radius,
                    "page": 1
                }
            }
            
            start_time = time.time()
            
            if offer_type == "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞":
                data = parser.get_newbuildings(**params)
            else:
                data = parser.get_flats(deal_type="sale", **params)
            
            cleaned_data = clean_data(data)
            if cleaned_data is not None:
                return {
                    'data': cleaned_data,
                    'time': time.time() - start_time
                }
            
        except Exception as e:
            if attempt == retry_count - 1:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}")
                return None
            time.sleep(1)
    
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –∞–¥—Ä–µ—Å—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def get_address_suggestions(query):
    if not query or len(query) < 3:
        return []
    
    cache_key = hash(query)
    if cache_key in st.session_state.geo_cache:
        return st.session_state.geo_cache[cache_key]
    
    try:
        geolocator = get_geocoder()
        locations = geolocator.geocode(query, exactly_one=False, limit=3) or []
        suggestions = [loc.address.split(',')[0] for loc in locations]
        st.session_state.geo_cache[cache_key] = suggestions
        return suggestions
    except Exception:
        return []

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def display_results(data):
    st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({len(data)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    m1, m2, m3 = st.columns(3)
    m1.metric("–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", len(data))
    m2.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{data['price_per_m2'].mean():,.0f} ‚ÇΩ/–º¬≤")
    m3.metric("–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", 
             f"{data['price_per_m2'].min():,.0f}-{data['price_per_m2'].max():,.0f} ‚ÇΩ/–º¬≤")
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
    tab1, tab2 = st.tabs(["–¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"])
    
    with tab1:
        st.dataframe(
            data.sort_values('price_per_m2'),
            column_config={
                "price": st.column_config.NumberColumn("–¶–µ–Ω–∞", format="%.0f ‚ÇΩ"),
                "area": st.column_config.NumberColumn("–ü–ª–æ—â–∞–¥—å", format="%.1f –º¬≤"),
                "price_per_m2": st.column_config.NumberColumn("–¶–µ–Ω–∞/–º¬≤", format="%.0f ‚ÇΩ")
            },
            height=400,
            use_container_width=True
        )
    
    with tab2:
        c1, c2 = st.columns(2)
        with c1:
            fig1 = px.histogram(
                data,
                x='price_per_m2',
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω',
                labels={'price_per_m2': '–¶–µ–Ω–∞ –∑–∞ –º¬≤ (‚ÇΩ)'}
            )
            st.plotly_chart(fig1, use_container_width=True)
        
        with c2:
            fig2 = px.scatter(
                data,
                x='area',
                y='price',
                color='rooms',
                hover_name='address',
                title='–¶–µ–Ω–∞ vs –ü–ª–æ—â–∞–¥—å',
                labels={'area': '–ü–ª–æ—â–∞–¥—å (–º¬≤)', 'price': '–¶–µ–Ω–∞ (‚ÇΩ)'}
            )
            st.plotly_chart(fig2, use_container_width=True)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    init_session_state()
    st.set_page_config(page_title="–£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", layout="wide")
    st.title("üîç –£—Å—Ç–æ–π—á–∏–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    
    with st.form("main_form"):
        address = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç 52'):",
            help="–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"
        )
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
        suggestions = get_address_suggestions(address)
        if suggestions:
            selected = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫:",
                suggestions,
                index=None
            )
            if selected:
                address = selected
        
        cols = st.columns([1,1,2])
        with cols[0]:
            radius = st.slider("–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–∫–º)", 0.3, 2.0, 0.8, 0.1)
        with cols[1]:
            offer_type = st.radio("–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", ["–í—Ç–æ—Ä–∏—á–∫–∞", "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞"])
        with cols[2]:
            rooms = st.multiselect(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
                ["–°—Ç—É–¥–∏—è", "1", "2", "3", "4+"],
                default=["1", "2"]
            )
        
        if st.form_submit_button("–ù–∞–π—Ç–∏", type="primary"):
            if not address or len(address.strip()) < 3:
                st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
                st.stop()
            
            current_query = {
                'address': address,
                'radius': radius,
                'offer_type': offer_type,
                'rooms': tuple(rooms)
            }
            
            if current_query == st.session_state.last_query and st.session_state.search_data is not None:
                st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
            else:
                with st.spinner(f"–ò—â–µ–º {offer_type.lower()} –≤ —Ä–∞–π–æ–Ω–µ {address}..."):
                    result = safe_cian_parse(
                        address=address,
                        radius=radius,
                        offer_type=offer_type,
                        rooms=rooms
                    )
                    
                    if result:
                        st.session_state.search_data = result['data']
                        st.session_state.last_query = current_query
                        st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {result['time']:.1f} —Å–µ–∫")
                    else:
                        st.error("""
                        –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
                        1. –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                        2. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
                        3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¶–ò–ê–ù
                        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.
                        """)
    
    if st.session_state.search_data is not None:
        display_results(st.session_state.search_data)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Å–æ–≤–µ—Ç–∞–º–∏
    st.sidebar.markdown("""
    ### –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
    1. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∞–¥—Ä–µ—Å–µ
    2. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ (0.5-1 –∫–º)
    3. –î–ª—è –Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–∫ —É—Ç–æ—á–Ω—è–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ñ–ö
    4. –í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–º–Ω–∞—Ç
    5. –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
    """)

if __name__ == "__main__":
    main()
