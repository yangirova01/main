import streamlit as st
import pandas as pd
from cianparser import CianParser
from geopy.geocoders import Nominatim
import plotly.express as px
from geopy.extra.rate_limiter import RateLimiter
from functools import lru_cache
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
DEFAULT_RADIUS = 0.5  # –∫–º
MAX_RADIUS = 3.0      # –∫–º
INITIAL_ROOMS = ["1", "2"]  # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'valid_address' not in st.session_state:
    st.session_state.valid_address = ""
if 'fast_search' not in st.session_state:
    st.session_state.fast_search = True

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–æ–∫–æ–¥–µ—Ä —Å —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
@st.cache_resource
def get_geocoder():
    geolocator = Nominatim(user_agent="fast_estate_app", timeout=5)
    return RateLimiter(geolocator.geocode, min_delay_seconds=0.5)

# –ö—ç—à–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
@lru_cache(maxsize=50)
def get_address_suggestions(query: str):
    """–£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        if len(query) < 3:
            return []
        
        geocode = get_geocoder()
        locations = geocode(query, exactly_one=False, limit=3)  # –í—Å–µ–≥–æ 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏
        return [loc.address.split(',')[0] for loc in locations][:3] if locations else []
    except Exception:
        return []

def quick_parse(address, radius, offer_type, rooms):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        parser = CianParser(location=address)
        
        params = {
            "rooms": rooms,
            "with_saving_csv": False,
            "additional_settings": {
                "radius": radius,
                "page": 1  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            }
        }
        
        start_time = time.time()
        data = parser.get_newbuildings(**params) if offer_type == "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞" \
              else parser.get_flats(deal_type="sale", **params)
        
        parse_time = time.time() - start_time
        st.session_state.last_parse_time = parse_time
        
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return pd.DataFrame()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", layout="wide")
st.title("‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")

# –ë–ª–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
with st.expander("üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫", expanded=True):
    address = st.text_input(
        "–£–ª–∏—Ü–∞ –∏ –¥–æ–º:", 
        placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å...",
        key="fast_address"
    )
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
    if address and len(address) >= 3:
        with st.spinner("–ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã..."):
            suggestions = get_address_suggestions(address)
            if suggestions:
                selected = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å:", [""] + suggestions)
                if selected:
                    address = selected

    cols = st.columns(3)
    with cols[0]:
        radius = st.slider("–†–∞–¥–∏—É—Å (–∫–º)", 0.5, MAX_RADIUS, DEFAULT_RADIUS, 0.1)
    with cols[1]:
        offer_type = st.radio("–¢–∏–ø:", ["–í—Ç–æ—Ä–∏—á–∫–∞", "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞"], horizontal=True)
    with cols[2]:
        rooms = st.multiselect("–ö–æ–º–Ω–∞—Ç—ã", ["–°—Ç—É–¥–∏—è", "1", "2", "3", "4+"], default=INITIAL_ROOMS)

# –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
if st.button("–ù–∞–π—Ç–∏ –±—ã—Å—Ç—Ä–æ", type="primary"):
    if not address:
        st.warning("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å")
        st.stop()
    
    with st.spinner(f"–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ {offer_type.lower()}..."):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        quick_rooms = rooms[:2]
        df = quick_parse(address, radius, offer_type, tuple(quick_rooms))
        
        if df.empty:
            st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
            st.stop()
            
        # –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∫–∞–∑ –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(df)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –∑–∞–Ω—è–ª {st.session_state.last_parse_time:.1f} —Å–µ–∫)")
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        tab1, tab2 = st.tabs(["üìã –°–ø–∏—Å–æ–∫", "üìä –ì—Ä–∞—Ñ–∏–∫–∏"])
        
        with tab1:
            st.dataframe(
                df[['address', 'price', 'area', 'rooms']].head(10),
                height=300,
                use_container_width=True
            )
            
        with tab2:
            try:
                df['price_num'] = pd.to_numeric(df['price'].str.replace(r'\D', '', regex=True))
                df['area_num'] = pd.to_numeric(df['area'].astype(str).str.extract(r'(\d+\.?\d*)')[0])
                df = df.dropna(subset=['price_num', 'area_num'])
                df['price_per_m2'] = df['price_num'] / df['area_num']
                
                fig = px.scatter(
                    df.head(30),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    x='area_num',
                    y='price_num',
                    hover_name='address',
                    title='–¶–µ–Ω–∞ vs –ü–ª–æ—â–∞–¥—å'
                )
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
if st.checkbox("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"):
    with st.expander("üîé –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        full_radius = st.slider("–ü–æ–ª–Ω—ã–π —Ä–∞–¥–∏—É—Å (–∫–º)", 0.5, 5.0, 2.0)
        all_rooms = st.multiselect("–í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", ["–°—Ç—É–¥–∏—è", "1", "2", "3", "4+"], default=["1", "2", "3"])
        
        if st.button("–ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫"):
            with st.spinner("–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫..."):
                full_df = quick_parse(address, full_radius, offer_type, tuple(all_rooms))
                
                if not full_df.empty:
                    st.success(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(full_df)}")
                    st.dataframe(full_df, height=500)
