import streamlit as st
import folium
import numpy as np
import pandas as pd
import geopandas as gpd
from shapely.geometry import Polygon, MultiPolygon, box
from streamlit_folium import st_folium
from itertools import combinations

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide")
st.title("–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –¥–æ–º–∞ –Ω–∞ —É—á–∞—Å—Ç–∫–µ")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'results' not in st.session_state:
    st.session_state.results = None
if 'site_polygon' not in st.session_state:
    st.session_state.site_polygon = None

# ===== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====
SECTION_TYPES = {
    "26x16": {"width": 26, "height": 16, "color": "#1f77b4", "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç 26x16"},
    "28x16": {"width": 28, "height": 16, "color": "#ff7f0e", "name": "–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π 28x16"},
    "26x18": {"width": 26, "height": 18, "color": "#2ca02c", "name": "–° —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–æ–π 26x18"},
    "18x18": {"width": 18, "height": 18, "color": "#9467bd", "name": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π 18x18"}
}

def m_to_deg(meters, lat):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ—Ç—Ä–æ–≤ –≤ –≥—Ä–∞–¥—É—Å—ã —Å —É—á–µ—Ç–æ–º —à–∏—Ä–æ—Ç—ã"""
    return meters / (111320 * np.cos(np.radians(lat)))

def validate_coordinates(coords):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É—á–∞—Å—Ç–∫–∞"""
    if len(coords) < 3:
        raise ValueError("–£—á–∞—Å—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏")
    if any(len(point) != 2 for point in coords):
        raise ValueError("–ö–∞–∂–¥–∞—è —Ç–æ—á–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 2 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    return True

# ===== –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö =====
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—á–∞—Å—Ç–∫–∞")
    coord_input = st.text_area(
        "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—á–∞—Å—Ç–∫–∞ ([[lat, lon], ...]):",
        """[[55.796391, 37.535800],
        [55.796288, 37.535120],
        [55.795950, 37.535350],
        [55.796050, 37.536000]]""",
        height=150
    )

    st.header("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–º–∞")
    section_count = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π:", 2, 5, 2)
    selected_sections = []
    for i in range(section_count):
        selected_sections.append(st.selectbox(
            f"–°–µ–∫—Ü–∏—è {i+1}:",
            list(SECTION_TYPES.keys()),
            format_func=lambda x: SECTION_TYPES[x]["name"],
            key=f"section_{i}"
        ))

    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
    margin = st.slider("–û—Ç—Å—Ç—É–ø –æ—Ç –≥—Ä–∞–Ω–∏—Ü (–º):", 0, 20, 5)
    min_distance = st.slider("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏ (–º):", 0, 10, 2)
    floors = st.slider("–≠—Ç–∞–∂–Ω–æ—Å—Ç—å:", 1, 25, 5)
    orientation = st.radio("–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è", ["–õ—é–±–∞—è", "–°–µ–≤–µ—Ä-–Æ–≥", "–í–æ—Å—Ç–æ–∫-–ó–∞–ø–∞–¥"], index=0)

# –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É—á–∞—Å—Ç–∫–∞
try:
    coords = eval(coord_input)
    validate_coordinates(coords)
    site_polygon = Polygon(coords)
    centroid = list(site_polygon.centroid.coords)[0][::-1]
    st.session_state.site_polygon = site_polygon
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.stop()

# ===== –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è =====
@st.cache_data(show_spinner="–ü–æ–¥–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
def generate_placements(_site_polygon, sections, margin, min_distance, floors, orientation):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–µ–∫—Ü–∏–π"""
    placements = []
    min_lon, min_lat, max_lon, max_lat = _site_polygon.bounds
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —É–≥–ª–æ–≤ –ø–æ–≤–æ—Ä–æ—Ç–∞
    angles = [0, 90] if orientation == "–õ—é–±–∞—è" else (
        [0] if orientation == "–°–µ–≤–µ—Ä-–Æ–≥" else [90]
    )
    
    for angle in angles:
        section_polys = []
        total_width = 0
        total_height = 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–∞–±–∞—Ä–∏—Ç—ã –≤—Å–µ–≥–æ –¥–æ–º–∞
        for section in sections:
            w = SECTION_TYPES[section]["width"]
            h = SECTION_TYPES[section]["height"]
            if angle == 90:
                w, h = h, w
            section_polys.append({
                "w": m_to_deg(w, centroid[1]),
                "h": m_to_deg(h, centroid[1]),
                "color": SECTION_TYPES[section]["color"],
                "name": SECTION_TYPES[section]["name"]
            })
            total_width += m_to_deg(w, centroid[1]) + m_to_deg(min_distance, centroid[1])
            total_height = max(total_height, m_to_deg(h, centroid[1]))
        
        margin_deg = m_to_deg(margin, centroid[1])
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–≥ –¥–ª—è –±–æ–ª—å—à–∏—Ö —É—á–∞—Å—Ç–∫–æ–≤
        lon_steps = 20 if (max_lon - min_lon) > 0.001 else 10
        lat_steps = 20 if (max_lat - min_lat) > 0.001 else 10
        
        # –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–π
        for lon in np.linspace(min_lon + margin_deg, max_lon - total_width - margin_deg, lon_steps):
            for lat in np.linspace(min_lat + margin_deg, max_lat - total_height - margin_deg, lat_steps):
                current_x = lon
                valid = True
                house_polys = []
                
                for section in section_polys:
                    sec_poly = box(
                        current_x, lat,
                        current_x + section["w"], lat + section["h"]
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —É—á–∞—Å—Ç–æ–∫ –∏ –æ—Ç—Å—Ç—É–ø—ã
                    if not _site_polygon.contains(sec_poly.buffer(-margin_deg/2)):
                        valid = False
                        break
                    
                    house_polys.append({
                        "poly": sec_poly,
                        "color": section["color"],
                        "name": section["name"]
                    })
                    current_x += section["w"] + m_to_deg(min_distance, centroid[1])
                
                if valid and house_polys:
                    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏ —Å —É—á–µ—Ç–æ–º –ö–ò (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
                    total_area = sum(
                        (p["poly"].bounds[2]-p["poly"].bounds[0]) * 
                        (p["poly"].bounds[3]-p["poly"].bounds[1]) * 
                        (111320**2) * floors * 0.7  # 0.7 - —Ç–∏–ø–æ–≤–æ–π –ö–ò
                        for p in house_polys
                    )
                    
                    placements.append({
                        "position": [lon, lat],
                        "angle": angle,
                        "sections": house_polys,
                        "total_area": total_area,
                        "efficiency": total_area / _site_polygon.area * (111320**2)
                    })
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∏
    return sorted(placements, key=lambda x: -x["efficiency"])[:15]

# ===== –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è =====
def create_map(_site_polygon, placements):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
    m = folium.Map(location=centroid, zoom_start=17, tiles='cartodbpositron')
    
    # –£—á–∞—Å—Ç–æ–∫
    folium.GeoJson(
        _site_polygon.__geo_interface__,
        style_function=lambda x: {
            "fillColor": "#ffff00",
            "color": "#ffa500",
            "weight": 2,
            "fillOpacity": 0.2
        },
        name="–ì—Ä–∞–Ω–∏—Ü–∞ —É—á–∞—Å—Ç–∫–∞",
        tooltip="–í–∞—à —É—á–∞—Å—Ç–æ–∫"
    ).add_to(m)
    
    # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    for i, place in enumerate(placements, 1):
        group = folium.FeatureGroup(name=f"–í–∞—Ä–∏–∞–Ω—Ç {i}", show=False)
        
        for j, section in enumerate(place["sections"], 1):
            coords = [
                [section["poly"].bounds[1], section["poly"].bounds[0]],
                [section["poly"].bounds[1], section["poly"].bounds[2]],
                [section["poly"].bounds[3], section["poly"].bounds[2]],
                [section["poly"].bounds[3], section["poly"].bounds[0]]
            ]
            
            folium.Polygon(
                locations=coords,
                color=section["color"],
                fill=True,
                fillOpacity=0.7,
                weight=1,
                popup=f"""<b>–í–∞—Ä–∏–∞–Ω—Ç {i}</b><br>
                          –°–µ–∫—Ü–∏—è {j}: {section['name']}<br>
                          –£–≥–æ–ª: {place['angle']}¬∞<br>
                          –ü–ª–æ—â–∞–¥—å: {place['total_area']/len(place['sections']):.1f} –º¬≤"""
            ).add_to(group)
        
        group.add_to(m)
    
    folium.LayerControl(collapsed=False).add_to(m)
    folium.LatLngPopup().add_to(m)
    return m

# ===== –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ =====
col1, col2 = st.columns([3, 1])

with col2:
    if st.button("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã", type="primary", use_container_width=True):
        with st.spinner("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ..."):
            placements = generate_placements(
                st.session_state.site_polygon,
                selected_sections,
                margin,
                min_distance,
                floors,
                orientation
            )
            st.session_state.results = placements
            
    if st.session_state.results:
        st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(st.session_state.results)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        best_option = max(st.session_state.results, key=lambda x: x['efficiency'])
        
        with st.expander("–õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç", expanded=True):
            st.metric("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å", f"{best_option['total_area']:,.0f} –º¬≤")
            st.metric("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", f"{best_option['efficiency']:.1%}")
            st.metric("–≠—Ç–∞–∂–Ω–æ—Å—Ç—å", floors)
            st.metric("–£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞", f"{best_option['angle']}¬∞")
            
        if st.download_button(
            "üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
            pd.DataFrame([{
                "–í–∞—Ä–∏–∞–Ω—Ç": i+1,
                "–ü–ª–æ—â–∞–¥—å (–º¬≤)": p["total_area"],
                "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": f"{p['efficiency']:.1%}",
                "–£–≥–æ–ª": f"{p['angle']}¬∞",
                "–°–µ–∫—Ü–∏–π": len(p["sections"])
            } for i, p in enumerate(st.session_state.results)]).to_csv(index=False).encode('utf-8'),
            "–≤–∞—Ä–∏–∞–Ω—Ç—ã_—Ä–∞–∑–º–µ—â–µ–Ω–∏—è.csv",
            "text/csv",
            use_container_width=True
        ):
            st.toast("–§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!", icon="‚úÖ")

with col1:
    if st.session_state.results:
        m = create_map(st.session_state.site_polygon, st.session_state.results)
        st_folium(m, width=800, height=600, returned_objects=[])
        
        st.subheader("–¢–æ–ø –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        df = pd.DataFrame([{
            "–í–∞—Ä–∏–∞–Ω—Ç": i+1,
            "–ü–ª–æ—â–∞–¥—å, –º¬≤": f"{p['total_area']:,.0f}",
            "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": f"{p['efficiency']:.1%}",
            "–£–≥–æ–ª": f"{p['angle']}¬∞",
            "–°–µ–∫—Ü–∏–π": len(p["sections"])
        } for i, p in enumerate(st.session_state.results)])
        
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": st.column_config.ProgressColumn(
                    format="%.1f%%",
                    min_value=0,
                    max_value=1.0
                )
            }
        )
    else:
        st.info("–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã'")
        st.image("https://i.imgur.com/JiQkLZP.png", caption="–ü—Ä–∏–º–µ—Ä –º–æ–¥—É–ª—å–Ω–æ–≥–æ –¥–æ–º–∞")
