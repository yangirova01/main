import streamlit as st
import pandas as pd
from cianparser import CianParser
import math
import plotly.graph_objects as go
from geopy.geocoders import Nominatim
from geopy.distance import geodesic

def get_coordinates(address):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –∞–¥—Ä–µ—Å—É"""
    geolocator = Nominatim(user_agent="geoapiExercises")
    location = geolocator.geocode(address)
    if location:
        return (location.latitude, location.longitude)
    return None

def parse_cian_flats(location, radius_km, deal_type="sale", rooms=(1, 2, 3, 4)):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –¶–ò–ê–ù"""
    parser = CianParser(location=location)
    try:
        data = parser.get_flats(
            deal_type=deal_type,
            rooms=rooms,
            with_saving_csv=False,
            additional_settings={"radius": radius_km}
        )
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def calculate_average_price(df):
    """–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –∑–∞ –∫–≤.–º"""
    if df is None or df.empty:
        return None
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df['price'] = df['price'].str.replace('[^\d]', '', regex=True).astype(float)
    df['area'] = df['area'].str.replace('[^\d.]', '', regex=True).astype(float)
    
    # –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∑–∞ –∫–≤.–º
    df['price_per_m2'] = df['price'] / df['area']
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ (—Ü–µ–Ω—ã < 10_000 –∏–ª–∏ > 1_000_000 –∑–∞ –∫–≤.–º)
    df = df[(df['price_per_m2'] > 10_000) & (df['price_per_m2'] < 1_000_000)]
    
    return df['price_per_m2'].mean()

def main():
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", layout="wide")
    st.title("üìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    
    # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    with st.expander("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞", expanded=True):
        address = st.text_input("–ê–¥—Ä–µ—Å —É—á–∞—Å—Ç–∫–∞", "–ö–∞–∑–∞–Ω—å, –ö–∞—Å–∞—Ç–∫–∏–Ω–∞ 3")
        radius = st.slider("–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–∫–º)", 0.5, 5.0, 1.0, 0.1)
        deal_type = st.radio("–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", ["–í—Ç–æ—Ä–∏—á–∫–∞", "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞"], index=0)
        rooms = st.multiselect(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", 
            ["–°—Ç—É–¥–∏—è", "1", "2", "3", "4+"], 
            default=["1", "2", "3"]
        )
    
    if st.button("–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        with st.spinner("–ò—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è..."):
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            cian_deal_type = "secondary" if deal_type == "–í—Ç–æ—Ä–∏—á–∫–∞" else "newbuilding"
            cian_rooms = []
            for r in rooms:
                if r == "–°—Ç—É–¥–∏—è": cian_rooms.append(0)
                elif r == "4+": cian_rooms.append(4)
                else: cian_rooms.append(int(r))
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            coords = get_coordinates(address)
            if coords:
                st.success(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—á–∞—Å—Ç–∫–∞: {coords[0]:.4f}, {coords[1]:.4f}")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
            df = parse_cian_flats(
                location=address,
                radius_km=radius,
                deal_type=cian_deal_type,
                rooms=tuple(cian_rooms)
            )
            
            if df is not None and not df.empty:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(df)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
                
                # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
                avg_price = calculate_average_price(df)
                if avg_price:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∫–≤.–º", f"{avg_price:,.0f} ‚ÇΩ".replace(",", " "))
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                st.dataframe(df[['price', 'area', 'rooms', 'address', 'url']].head(20))
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω")
                fig = go.Figure()
                fig.add_trace(go.Histogram(
                    x=df['price_per_m2'],
                    nbinsx=50,
                    marker_color='#636EFA'
                ))
                fig.update_layout(
                    title="–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ü–µ–Ω –∑–∞ –∫–≤.–º",
                    xaxis_title="–¶–µ–Ω–∞ –∑–∞ –∫–≤.–º (‚ÇΩ)",
                    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.")

if __name__ == "__main__":
    main()
